<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
    </welcome-file-list>

    <!-- 加载业务层和持久层的spring配置文件 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:app-context.xml</param-value>
    </context-param>

    <!-- 启动业务层的spring容器 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- 配置DispatcherServlet -->
    <servlet>
        <servlet-name>phy</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 初始化WebApplicationContext -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:mvc-context.xml</param-value>
        </init-param>

        <!-- 是否将WebApplicationContext发布到ServletContext的属性列表中，
        以便可借由ServletContext找到WebApplicationContext实例 -->
        <init-param>
            <param-name>publishContext</param-name>
            <param-value>false</param-value>
        </init-param>

        <!-- 当DispatcherServlet处理完一个请求后，是否需要向容器发布一个事件 -->
        <init-param>
            <param-name>publishEvents</param-name>
            <param-value>false</param-value>
        </init-param>
        <!-- 支持异步处理 -->
        <async-supported>true</async-supported>
    </servlet>

    <!-- 拦截请求 -->
    <servlet-mapping>
        <servlet-name>phy</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>


</web-app>