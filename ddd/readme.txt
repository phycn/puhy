ddd代码模型

application     主要存放应用层服务组合和编排相关的代码。应用服务向下基于微服务内的领域服务或外部微服务的应用服务
                完成服务的编排和组合，向上为用户接口层提供各种应用数据展现支持服务。应用服务和事件等代码会放在这
                一层目录里
    event       主要存放事件相关的代码。它包括两个子目录：publish 和 subscribe。前者主要存放事件发布相关代码，
                后者主要存放事件订阅相关代码（事件处理相关的核心业务逻辑在领域层实现）
    service     这层的服务是应用服务。应用服务会对多个领域服务或外部应用服务进行封装、编排和组合，对外提供粗粒度
                的服务。应用服务主要实现服务组合和编排，是一段独立的业务逻辑。你可以将所有应用服务放在一个应用服
                务类里，也可以把一个应用服务设计为一个应用服务类，以防应用服务类代码量过大


domain          主要存放领域层核心业务逻辑相关的代码。领域层可以包含多个聚合代码包，它们共同实现领域模型的核心业
                务逻辑。聚合以及聚合内的实体、方法、领域服务和事件等代码会放在这一层目录里
   aggregate    聚合软件包的根目录，可以根据实际项目的聚合名称命名，比如权限聚合。在聚合内定义聚合根、实体和值对
                象以及领域服务之间的关系和边界。聚合内实现高内聚的业务逻辑，它的代码可以独立拆分为微服务

       entity   存放聚合根、实体、值对象以及工厂模式（Factory）相关代码。实体类采用充血模型，同一实体相关的业务
                逻辑都在实体类代码中实现。跨实体的业务逻辑代码在领域服务中实现
       event    存放事件实体以及与事件活动相关的业务逻辑代码
       service  存放领域服务代码。一个领域服务是多个实体组合出来的一段业务逻辑。你可以将聚合内所有领域服务都放在
                一个领域服务类中，你也可以把每一个领域服务设计为一个类。如果领域服务内的业务逻辑相对复杂，我建议
                你将一个领域服务设计为一个领域服务类，避免由于所有领域服务代码都放在一个领域服务类中，而出现代码
                臃肿的问题。领域服务封装多个实体或方法后向上层提供应用服务调用。
       repository   存放所在聚合的查询或持久化领域对象的代码，通常包括仓储接口和仓储实现方法。为了方便聚合的拆分
                    和组合，我们设定了一个原则：一个聚合对应一个仓储。


infrastructure  基础层
    config      主要存放配置相关代码
    util        主要存放平台、开发框架、消息、数据库、缓存、文件、总线、网关、第三方类库、通用算法等基础代码，你
                可以为不同的资源类别建立不同的子目录


interfaces      它主要存放用户接口层与前端交互、展现数据相关的代码。前端应用通过这一层的接口，向应用服务获取展现
                所需的数据。这一层主要用来处理用户发送的 Restful 请求，解析用户输入的配置文件，并将数据传递给
                Application 层。数据的组装、数据传输格式以及 Facade 接口等代码都会放在这一层目录里
    assembler   实现 DTO 与领域对象之间的相互转换和数据交换
    dto         数据传输的载体，内部不存在任何业务逻辑，我们可以通过DTO把内部的领域对象与外界隔离
    facade      提供较粗粒度的调用接口，将用户请求委派给一个或多个应用服务进行处理