### 设置###
log4j.rootLogger = debug,stdout,D,E
#phy.log4j包下的类日志定义在phy内
log4j.logger.phy.log4j=debug,phy
#phy.log4j包下的日志只会写在phy的日志文件内
log4j.additivity.phy.log4j=false

log4j.appender.phy = org.apache.log4j.DailyRollingFileAppender
log4j.appender.phy.File = /Users/puhongyu/Documents/workspace/log4j/logs/phy.txt
log4j.appender.phy.Append = true
log4j.appender.phy.Threshold = DEBUG 
log4j.appender.phy.layout = org.apache.log4j.PatternLayout
log4j.appender.phy.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n

### 输出信息到控制台 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n

### 输出DEBUG 级别以上的日志到=E://logs/error.log ###
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File = /Users/puhongyu/Documents/workspace/log4j/logs/debug.txt
log4j.appender.D.Append = true
log4j.appender.D.Threshold = DEBUG 
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n

### 输出ERROR 级别以上的日志到=E://logs/error.log ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File =/Users/puhongyu/Documents/workspace/log4j/logs/error.txt
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR 
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n



#%m 输出代码中指定的消息
#%M 输出打印该条日志的方法名
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL  
#%r 输出自应用启动到输出该log信息耗费的毫秒数  
#%c 输出所属的类目，通常就是所在类的全名  
#%t 输出产生该日志事件的线程名  
#%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”  
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921  
#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)

#org.apache.log4j.ConsoleAppender（控制台），  
#org.apache.log4j.FileAppender（文件），  
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），  
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），  
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）

#org.apache.log4j.HTMLLayout（以HTML表格形式布局），  
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），  
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），  
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）